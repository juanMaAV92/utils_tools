from typing import List
from uuid import UUID

from fastapi import APIRouter, Depends, File, HTTPException, Query, UploadFile
from fastapi.responses import FileResponse, JSONResponse

from app import utils
from app.constants.routes import Routes
from app.schemas import DownloadFilesResponse, UploadFilesResponse, ProcessRequest
from app.services import FileService, file_service
from app.utils.file_utils import is_valid_file_size

router = APIRouter()


@router.post(
    Routes.FILES,
    response_model=UploadFilesResponse,
)
async def upload_file(
    files: List[UploadFile] = File(...),
    service: FileService = Depends(lambda: file_service),
):

    if utils.is_valid_file_size(files) is False:
        raise HTTPException(
            status_code=400, detail="The file size exceeds the allowed limit"
        )

    result = await service.save_files(files)
    return JSONResponse(
        content=UploadFilesResponse(
            status="success", token=result.token, type_files=result.file_type
        ).model_dump(),
        status_code=201,
        media_type="application/json",
    )


@router.get(
    Routes.FILES, 
    response_model=DownloadFilesResponse
)
async def download_files(
    token: UUID = Query(..., description="The token generated by the upload endpoint"),
    file_service: FileService = Depends(lambda: file_service),
):
    file_names = await file_service.get_files(token)

    return JSONResponse(
        content=DownloadFilesResponse(
            status="success", file_names=file_names
        ).model_dump(),
        status_code=200,
        media_type="application/json",
    )


@router.delete(Routes.FILES)
async def delete_files(
    token: UUID = Query(..., description="The token generated by the upload endpoint"),
    file_service: FileService = Depends(lambda: file_service),
):
    await file_service.delete_files(token)
    return JSONResponse(
        content={"status": "success"},
        status_code=204,
        media_type="application/json",
   )


@router.post(Routes.PROCESS_FILES)
async def process_files(
    body: ProcessRequest,
):
    try:
        response = await  file_service.process_files(body)
        return FileResponse(
            path = response.path,
            filename= response.filename,
            media_type= response.media_type,
        )
    except ValueError as e:
        raise HTTPException(status_code=400, detail="An error occurred while processing the files.")
    except Exception as e:
        raise HTTPException(status_code=500, detail="Internal server error.")
    
